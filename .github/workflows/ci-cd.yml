name: Monorepo CI/CD

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1

jobs:
  # 1. Infrastructure as Code (Terraform)
  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: terraform
        run: terraform plan

      - name: Terraform Apply (auto-approve for dev)
        working-directory: terraform
        run: |
            terraform import aws_s3_bucket.app_bucket quickcv-frontend-dev || true
            terraform import aws_iam_user.app_user quickcv-app-user || true
            terraform import aws_dynamodb_table.cv_tracking cv_tracking || true
            terraform import aws_dynamodb_table.jd_tracking jd_tracking || true
            
            terraform apply -auto-approve

  # 2. Build and Push Docker Images
  build-and-push:
    needs: terraform
    runs-on: ubuntu-latest
    env:
      ECR_REPO_BACKEND: ${{ secrets.ECR_REPO_BACKEND }}
      ECR_REPO_FRONTEND: ${{ secrets.ECR_REPO_FRONTEND }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Backend Docker
      - name: Build backend Docker image
        run: docker build -t backend:latest ./backend

      - name: Tag backend Docker image
        run: docker tag backend:latest ${{ secrets.ECR_REPO_BACKEND }}:latest

      # Frontend Docker
      - name: Build frontend Docker image
        run: docker build -t frontend:latest ./HRwebapp

      - name: Tag frontend Docker image
        run: docker tag frontend:latest ${{ secrets.ECR_REPO_FRONTEND }}:latest

      # Login to ECR
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # Push images
      - name: Push backend Docker image
        run: docker push ${{ secrets.ECR_REPO_BACKEND }}:latest

      - name: Push frontend Docker image
        run: docker push ${{ secrets.ECR_REPO_FRONTEND }}:latest

  # 3. Deploy to Kubernetes
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up kubectl
      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER_NAME

      # Deploy backend with kubectl (YAML or Kustomize)
      - name: Deploy backend manifests
        run: kubectl apply -f Kubernetes/backend-deployment.yaml

      - name: Deploy backend service
        run: kubectl apply -f Kubernetes/backend-service.yaml

      # Deploy frontend with kubectl (YAML or Kustomize)
      - name: Deploy frontend manifests
        run: kubectl apply -f Kubernetes/frontend-deployment.yaml

      - name: Deploy frontend service
        run: kubectl apply -f Kubernetes/frontend-service.yaml

      # Restart deployments to pick up new images
      - name: Restart backend deployment
        run: kubectl rollout restart deployment/quickcv-backend

      - name: Restart frontend deployment
        run: kubectl rollout restart deployment/quickcv-frontend

      # Verify rollout
      - name: Verify backend rollout
        run: kubectl rollout status deployment/quickcv-backend

      - name: Verify frontend rollout
        run: kubectl rollout status deployment/quickcv-frontend