name: Frontend CI/CD

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
      R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
      R2_ENDPOINT_URL: ${{ secrets.R2_ENDPOINT_URL }}
      R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}
      GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        working-directory: HRwebapp
        run: npm install

      - name: Build project
        working-directory: HRwebapp
        run: |
          REACT_APP_R2_ACCESS_KEY_ID=$R2_ACCESS_KEY_ID \
          REACT_APP_R2_SECRET_ACCESS_KEY=$R2_SECRET_ACCESS_KEY \
          REACT_APP_R2_ENDPOINT_URL=$R2_ENDPOINT_URL \
          REACT_APP_R2_BUCKET_NAME=$R2_BUCKET_NAME \
          REACT_APP_GOOGLE_API_KEY=$GOOGLE_API_KEY \
          npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: us-east-1

      - name: Deploy to S3
        working-directory: HRwebapp
        run: |
          aws s3 sync dist/ s3://quickcv-frontend-dev --delete

      - name: Create CloudFront Distribution (if not exists)
        id: create-cloudfront
        run: |
          # Check if CloudFront distribution already exists
          DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?Origins.Items[0].DomainName=='quickcv-frontend-dev.s3.amazonaws.com'].Id" --output text)

          if [ -z "$DISTRIBUTION_ID" ]; then
            echo "Creating new CloudFront distribution..."
            DISTRIBUTION_CONFIG='{
              "CallerReference": "quickcv-frontend-dev",
              "Origins": {
                "Quantity": 1,
                "Items": [
                  {
                    "Id": "S3-quickcv-frontend-dev",
                    "DomainName": "quickcv-frontend-dev.s3.amazonaws.com",
                    "S3OriginConfig": {
                      "OriginAccessIdentity": ""
                    }
                  }
                ]
              },
              "DefaultCacheBehavior": {
                "TargetOriginId": "S3-quickcv-frontend-dev",
                "ViewerProtocolPolicy": "redirect-to-https",
                "AllowedMethods": {
                  "Quantity": 2,
                  "Items": ["GET", "HEAD"]
                },
                "CachedMethods": {
                  "Quantity": 2,
                  "Items": ["GET", "HEAD"]
                },
                "ForwardedValues": {
                  "QueryString": false,
                  "Cookies": {
                    "Forward": "none"
                  }
                },
                "MinTTL": 0
              },
              "Comment": "",
              "Enabled": true
            }'

            DISTRIBUTION_ID=$(aws cloudfront create-distribution --distribution-config "$DISTRIBUTION_CONFIG" --query "Distribution.Id" --output text)
            echo "New CloudFront distribution created with ID: $DISTRIBUTION_ID"
          else
            echo "CloudFront distribution already exists with ID: $DISTRIBUTION_ID"
          fi

          # Export the distribution ID for use in subsequent steps
          echo "DISTRIBUTION_ID=$DISTRIBUTION_ID" >> $GITHUB_ENV

      - name: Invalidate CloudFront Cache
        run: |
          if [ -n "${{ env.DISTRIBUTION_ID }}" ]; then
            aws cloudfront create-invalidation --distribution-id ${{ env.DISTRIBUTION_ID }} --paths "/*"
          else
            echo "CloudFront distribution ID is not set. Skipping cache invalidation."
          fi

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        working-directory: HRwebapp/terraform/dev
        run: terraform init

      - name: Terraform Plan
        working-directory: HRwebapp/terraform/dev
        run: terraform plan

      - name: Terraform Apply (auto-approve for dev)
        working-directory: HRwebapp/terraform/dev
        run: terraform apply -auto-approve