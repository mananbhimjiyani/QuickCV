name: Backend CI/CD

on:
  push:
    branches:
      - main

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
  AWS_REGION: us-east-1
  EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
  ECR_REPO: ${{ secrets.ECR_REPO }}
  S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}

jobs:
  deploy-backend:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1 # Set the AWS region here

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      # Step 2.5: Terraform IaC - Provision/Update Infrastructure
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        working-directory: backend/terraform/dev
        run: terraform init

      - name: Terraform Plan
        working-directory: backend/terraform/dev
        run: terraform plan

      # Step 2.6: Manual approval before Terraform apply (production)
      - name: Wait for approval
        if: github.ref == 'refs/heads/main'
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: mananbhimjiyani
          minimum-approvals: 1
          issue-title: "Manual approval required for Terraform apply (production)"
          issue-body: "Please approve to proceed with production infrastructure changes."

      - name: Terraform Apply (auto-approve for dev)
        working-directory: backend/terraform/dev
        run: terraform apply -auto-approve

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install -r backend/requirements.txt

      # Step 4: Build Docker image
      - name: Build Docker image
        run: |
          docker build -t quickcv-backend ./backend

      # Step 5: Log in to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Step 6: Tag and push Docker image to ECR
      - name: Push Docker image to ECR
        run: |
          # Extract the ECR repository URI
          ECR_REPOSITORY_URI=${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}
          
          # Tag the Docker image
          docker tag quickcv-backend:latest $ECR_REPOSITORY_URI:latest
          
          # Push the Docker image to ECR
          docker push $ECR_REPOSITORY_URI:latest

      # Step 7: Deploy to Kubernetes
      - name: Deploy to Kubernetes
        run: |
          # Update the deployment with the latest image
          kubectl set image deployment/quickcv-backend quickcv-backend=${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
          
          # Restart the deployment to apply changes
          kubectl rollout restart deployment quickcv-backend
          
          # Verify the rollout status
          kubectl rollout status deployment quickcv-backend

      # Step 2.7: Manual approval before Kubernetes deploy (production)
      - name: Wait for approval before deploy
        if: github.ref == 'refs/heads/main'
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: user1,user2
          minimum-approvals: 1
          issue-title: "Manual approval required for Kubernetes deploy (production)"
          issue-body: "Please approve to proceed with production deployment."

      - name: Apply Kubernetes overlay
        run: kubectl apply -k .  # with overlay-prod.yaml active

      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

      - name: Deploy with Helm
        run: helm install quickcv .